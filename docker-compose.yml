version: '3.8'

services:
  jenkins:
    build: ./jenkins
    ports:
      - "18080:8080"
      - "50000:50000"
    volumes:
      - jenkins_data:/var/jenkins_home
      - /var/run/docker.sock:/var/run/docker.sock
      - .:/app/projeto-pi
    restart: unless-stopped

  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: password
      POSTGRES_DB: transport_db
    volumes:
      - ./data-warehouse/init.sql:/docker-entrypoint-initdb.d/init.sql
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U admin -d transport_db" ]
      interval: 5s
      timeout: 5s
      retries: 10

  data-generator:
    build: ./data-generator
    volumes:
      - ./data:/app/data
    depends_on:
      postgres:
        condition: service_healthy
    restart: on-failure

  r-processing:
    build: ./r-processing
    volumes:
      - ./data:/app/data
    depends_on:
      data-generator:
        condition: service_completed_successfully
    restart: on-failure

  data-warehouse:
    build: ./data-warehouse
    volumes:
      - ./data:/app/data
    depends_on:
      r-processing:
        condition: service_completed_successfully
    restart: on-failure

  hadoop-simulations:
    build:
      context: ./spark-processing
    volumes:
      - ./data:/data
    command: python hadoop_simulations.py
    depends_on:
      r-processing:
        condition: service_completed_successfully
    restart: on-failure

  clustering-analysis:
    build:
      context: ./spark-processing
    volumes:
      - ./data:/data
    command: python clustering_analysis.py
    depends_on:
      r-processing:
        condition: service_completed_successfully
    restart: on-failure

  spark-submit-job:
    build:
      context: ./spark-processing
    volumes:
      - ./data:/data
    command: [ "spark-submit", "--master", "spark://spark-master:7077", "/app/spark_analysis.py" ]
    depends_on:
      spark-master:
        condition: service_started
      r-processing:
        condition: service_completed_successfully
    restart: on-failure

  spark-master:
    build:
      context: ./spark-processing
    ports:
      - "8081:8080"
      - "7077:7077"
    volumes:
      - ./data:/data
    environment:
      SPARK_MODE: master
    depends_on:
      r-processing:
        condition: service_completed_successfully
    restart: unless-stopped

  spark-worker:
    build:
      context: ./spark-processing
    depends_on:
      - spark-master
    environment:
      SPARK_MODE: worker
      SPARK_MASTER_URL: spark://spark-master:7077
    volumes:
      - ./data:/data
    restart: unless-stopped

  web-dashboard:
    # Seu dashboard Dash existente
    build: ./web-dashboard
    ports:
      - "5000:5000"
    volumes:
      - ./web-dashboard:/app
      - ./data:/app/shared_data
    depends_on:
      data-warehouse:
        condition: service_completed_successfully
      postgres:
        condition: service_healthy
      spark-submit-job:
        condition: service_completed_successfully
      clustering-analysis:
        condition: service_completed_successfully
    restart: unless-stopped

  grafana:
    # <-- NOVO SERVIÇO GRAFANA
    image: grafana/grafana-oss:latest # Ou uma versão específica como grafana/grafana-oss:9.5.16
    ports:
      - "3000:3000" # Porta padrão do Grafana
    volumes:
      - grafana_data:/var/lib/grafana # Para persistir dados e dashboards do Grafana
      # Opcional: Para provisionar DataSources e Dashboards automaticamente via arquivos
      # - ./grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
      # - ./grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin # IMPORTANTE: Mude esta senha em um ambiente de produção!
      # - GF_INSTALL_PLUGINS= # Adicione plugins do Grafana aqui, se necessário (ex: grafana-worldmap-panel)
    restart: unless-stopped
    depends_on:
      - postgres # Garante que o Postgres esteja idealmente disponível antes do Grafana tentar conectar

volumes:
  jenkins_data:
  postgres_data:
  grafana_data: # <-- NOVO VOLUME PARA O GRAFANA
